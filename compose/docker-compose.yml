version: '3.9'

networks:
  higress-net:
    external: false

services:
  nacos:
    image: nacos/nacos-server:${NACOS_SERVER_TAG:-v2.2.3}
    profiles: [ "nacos" ]
    env_file:
      - ./env/nacos.env
    networks:
      - higress-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.1:8848/nacos" ]
      interval: 1s
      timeout: 3s
      retries: 60
    volumes:
      - ./volumes/nacos:/home/nacos/data
    ports:
      - "${NACOS_HTTP_PORT:-8848}:8848/tcp"
      - "${NACOS_GRPC_PORT:-9848}:9848/tcp"
    restart: always

  initializer:
    image: higress-registry.cn-hangzhou.cr.aliyuncs.com/higress/runner:${HIGRESS_RUNNER_TAG}
    command:
      - ./init.sh
    profiles: [ "init" ]
    environment:
      - CONFIG_STORAGE
      - NACOS_SERVER_URL
      - NACOS_NS
      - NACOS_USERNAME
      - NACOS_PASSWORD
      - NACOS_DATA_ENC_KEY
      - HIGRESS_CONSOLE_PASSWORD
    networks:
      - higress-net
    volumes:
      - ./volumes:/mnt/volumes
      - ./scripts:/workspace
      - ${FILE_ROOT_DIR:-./volumes/dummy}:/opt/data/:rw

  precheck:
    image: higress-registry.cn-hangzhou.cr.aliyuncs.com/higress/runner:${HIGRESS_RUNNER_TAG}
    command:
      - ./precheck.sh
    environment:
      - CONFIG_STORAGE
      - NACOS_SERVER_URL
      - NACOS_NS
      - NACOS_USERNAME
      - NACOS_PASSWORD
    networks:
      - higress-net
    volumes:
      - ./volumes:/mnt/volumes:rw
      - ./scripts:/workspace:ro
      - ${FILE_ROOT_DIR:-./volumes/dummy}:/opt/data/:ro

  apiserver:
    image: higress-registry.cn-hangzhou.cr.aliyuncs.com/higress/api-server:${HIGRESS_API_SERVER_TAG}
    command:
      - --secure-port
      - "8443"
      - --client-ca-file
      - /etc/api/ca.crt
      - --tls-cert-file
      - /etc/api/server.crt
      - --tls-private-key-file
      - /etc/api/server.key
      - --storage
      - ${CONFIG_STORAGE:-nacos}
      - --file-root-dir
      - /opt/data
      - --nacos-server
      - ${NACOS_SERVER_URL}
      - --nacos-username
      - "${NACOS_USERNAME}"
      - --nacos-password
      - "${NACOS_PASSWORD}"
      - --nacos-ns-id
      - "${NACOS_NS}"
      - --nacos-encryption-key-file
      - /etc/api/nacos.key
    depends_on:
      precheck:
        condition: service_completed_successfully
    networks:
      - higress-net
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-fk", "https://127.0.0.1:8443/readyz" ]
      interval: 1s
      timeout: 3s
      retries: 60
    volumes:
      - ./volumes/api:/etc/api:ro
      - ${FILE_ROOT_DIR:-./volumes/dummy}:/opt/data/:rw

  controller:
    image: higress-registry.cn-hangzhou.cr.aliyuncs.com/higress/higress:${HIGRESS_CONTROLLER_TAG}
    command:
      - serve
      - --kubeconfig=/home/higress/.kube/config
      - --gatewaySelectorKey=higress
      - --gatewaySelectorValue=higress-system-higress-gateway
      - --ingressClass=
    depends_on:
      apiserver:
        condition: service_healthy
    networks:
      - higress-net
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.1:8888/ready" ]
      interval: 1s
      timeout: 3s
      retries: 60
    volumes:
      - ./volumes/kube:/home/higress/.kube:ro
      - ./volumes/controller/log/nacos:/var/log/nacos:rw

  pilot:
    image: higress-registry.cn-hangzhou.cr.aliyuncs.com/higress/pilot:${HIGRESS_PILOT_TAG}
    command:
      - discovery
      - --monitoringAddr=:15014
      - --log_output_level=default:info
      - --domain
      - cluster.local
      - --keepaliveMaxServerConnectionAge
      - 30m
      - --caCertFile
      - /etc/cacerts/ca-cert.pem
    depends_on:
      controller:
        condition: service_healthy
    env_file:
      - ./env/pilot.env
    networks:
      - higress-net
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-fk", "http://127.0.0.1:8080/ready" ]
      interval: 1s
      timeout: 3s
      retries: 60
    volumes:
      - ./volumes/kube:/var/run/secrets/remote:ro
      - ./volumes/pilot/cacerts:/etc/cacerts:ro
      - ./volumes/pilot/config:/etc/istio/config:ro

  gateway:
    image: higress-registry.cn-hangzhou.cr.aliyuncs.com/higress/gateway:${HIGRESS_GATEWAY_TAG}
    command:
      - proxy
      - router
      - --domain
      - higress-system.svc.cluster.local
      - --proxyLogLevel=warning
      - --proxyComponentLogLevel=misc:error
      - --log_output_level=all:info
      - --serviceCluster=higress-gateway
    env_file:
      - ./env/gateway.env
    depends_on:
      pilot:
        condition: service_healthy
    networks:
      - higress-net
    restart: always
    ports:
      - "${GATEWAY_HTTP_PORT:-80}:80/tcp"
      - "${GATEWAY_HTTPS_PORT:-443}:443/tcp"
      - "${GATEWAY_METRICS_PORT:-15020}:15020/tcp"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-fk",
          "http://127.0.0.1:15021/healthz/ready"
        ]
      interval: 1s
      timeout: 3s
      retries: 60
    volumes:
      - ./volumes/pilot/config:/etc/istio/config:ro
      - ./volumes/gateway/certs:/etc/certs:ro
      - ./volumes/gateway/podinfo:/etc/istio/pod:ro
      - ./volumes/gateway/istio/data:/var/lib/istio/data:rw

  console:
    image: higress-registry.cn-hangzhou.cr.aliyuncs.com/higress/console:${HIGRESS_CONSOLE_TAG}
    env_file:
      - ./env/console.env
    depends_on:
      controller:
        condition: service_healthy
    networks:
      - higress-net
    ports:
      - "${CONSOLE_PORT:-8080}:8080/tcp"
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-fk",
          "http://127.0.0.1:8080/"
        ]
      interval: 1s
      timeout: 3s
      retries: 60
    restart: always
    volumes:
      - ./volumes/kube:/home/higress/.kube:ro

  postcheck:
    image: higress-registry.cn-hangzhou.cr.aliyuncs.com/higress/runner:${HIGRESS_RUNNER_TAG}
    command:
      - ./postcheck.sh
    networks:
      - higress-net
    depends_on:
      apiserver:
        condition: service_healthy
      controller:
        condition: service_healthy
      pilot:
        condition: service_healthy
      gateway:
        condition: service_healthy
      console:
        condition: service_healthy
    volumes:
      - ./scripts:/workspace:ro
